Artisan's Accord - Developer DocumentationFor Minecraft Forge 1.21Version: 1.0.01. Mod OverviewArtisan's Accord is a resource generation mod that fundamentally rethinks the process by building upon a vanilla system: Villagers. Instead of introducing "magic blocks" that passively generate items, this mod introduces a dynamic, profession-based economy where players must build, manage, and scale a community of skilled artisans to generate resources.The core design philosophy is to create an engaging, progression-based system that rewards clever automation, logistical planning, and investment in infrastructure, while avoiding gameplay loops that feel like a grind or trivialize the progression of other mods.Key Design Goals:* No Magic Blocks: Resource generation is an active process performed by Villager NPCs at specialized, multi-block workstations.* Deep Progression: Players advance from basic resource doubling to complex, automated production of late-game materials. This progression is visual, with workstations physically expanding and improving.* Meaningful Player Interaction: The player acts as a manager or a "factory owner," responsible for supplying tools, managing villager needs, and designing efficient workshop layouts.* High Compatibility: A robust and simple-to-use API allows other mod developers to seamlessly integrate their resources, materials, and even custom villager tasks into the system.* Server Performance First: Systems are designed to be server-friendly, avoiding excessive block updates or world-breaking mechanics in favor of "virtual" processing and scheduled task execution.2. Core MechanicsThe mod is centered around two new Villager Professions, their workstations, and a new "Needs" system.2.1. New Profession: The GeologistThe Geologist is the foundation of the resource chain, responsible for prospecting and primary material extraction.* Workstation: Geology Table. A single block used for basic trades and identifying mineral samples.* Primary Task Structure (Multi-block): Prospecting Drill.o Tier 1 (Manual): A hand-cranked drill. The player assigns a Geologist, who will slowly work at the drill. The player must provide Drill Bits (a new tool with durability). The drill "prospects" the chunk it is in, slowly generating Mineral Samples corresponding to the ores that can spawn in that chunk (e.t., an Iron Sample, a Copper Sample). This process consumes Drill Bit durability and Villager food/stamina.o Tier 2 (Automated): The structure expands with a gearbox and motor. When powered by RF/FE, the drill works automatically, consuming power and durability at a faster rate to produce samples.* Output: Mineral Samples. These are initially useless on their own but are the key input for the next stage.2.2. New Profession: The ArtisanThe Artisan is the master refiner and crafter, capable of turning raw materials into usable resources.* Workstation: Artisan's Bench.* Primary Task Structure (Multi-block): The Workshop. This is a highly modular multi-block structure.o Core Block: Assembly Anvil. The player assigns an Artisan to this block.o Modular Stations: The player builds specialized stations around the Anvil, such as a Crusher, a Smelter, or a Washer.* The Process:1. The player places a Mineral Sample (e.g., Iron Sample) onto the Assembly Anvil.2. The player provides the Artisan with the necessary tools (e.g., Hammers for crushing, Tongs for smelting). These have durability.3. The Artisan takes the sample and performs a "production chain." For example, for an Iron Sample, they might:* Go to the Crusher station and use a Hammer to turn the sample into 2x Crushed Iron Dust.* Go to the Smelter station and use Tongs to smelt the dust into 2x Iron Ingots.o Higher-tier Workshops can have more stations (e.g., a Chemical Bath), allowing for more complex chains that yield 3x, 4x, or even 5x the resources, mimicking Mekanism's progression but through villager tasks.2.3. Villager Needs & ManagementTo avoid being a fire-and-forget system, villagers in this system have needs.* Stamina: Villagers have a stamina bar. Performing tasks drains it. They replenish it by going to a designated "Break Room" with chairs and food.* Tool Durability: Villagers will not work if their tools are broken. They will place broken tools in a designated "Tool Rack" block. The player must repair or replace them. Automation of this is a key late-game goal.* Happiness: A new metric. Villagers are happier in well-lit, decorated, and safe workshops. Higher happiness provides a small boost to production speed and the chance of not consuming tool durability on a given action.3. Development Path & Player ProgressionThe player's journey is designed to be a gradual scaling of their industrial community.1. Early Game: The player finds a village, crafts a Geology Table, and trades for their first Geologist. They build a manual Prospecting Drill and supply the Geologist with food and basic stone/iron Drill Bits. The player manually collects the Mineral Samples.2. Mid Game: The player establishes an Artisan. They build a basic Workshop with a Crusher and Smelter. They manually supply the Artisan with tools and samples, achieving 2x ore doubling. They will also upgrade their Drill to be power-driven, automating the sample production.3. Late Game: The player's focus shifts to logistics and automation.o They build a fully automated tool delivery and repair system using a high-tier Artisan with a "Toolsmithing" specialization.o They create complex, multi-stage Workshops with advanced stations to achieve 4x or 5x yields, requiring a steady supply of power, reagents, and specialized tools.o They design efficient layouts with item piping (from other mods) to move samples, dusts, and final products, and create dedicated break rooms to maximize villager uptime.o The ultimate goal is a self-sustaining, fully automated factory floor run by a community of happy, well-equipped villagers.4. For Mod Developers: API & CompatibilityEase of compatibility is a primary design goal. All custom resource additions are handled via JSON files or a simple, well-documented API.4.1. The API Structure (ArtisansAccordAPI)The API will be exposed via a dedicated static class. The primary interaction point will be during the FMLCommonSetupEvent.// Inside your mod's main classprivate void setup(final FMLCommonSetupEvent event) {    // Check if the mod is loaded before using the API    if (ModList.get().isLoaded("artisans_accord")) {        ArtisansAccordAPI.registerGeologyResource(myUraniumSample);        ArtisansAccordAPI.registerArtisanProcess(myArtisanUraniumProcess);    }}4.2. Registering a New Resource (Geologist)To make a resource discoverable by the Geologist, you register a GeologyResource object.// Example of creating a new resource definitionGeologyResource uraniumResource = new GeologyResource.Builder("my_mod_uranium")    .setItem(MyItems.URANIUM_SAMPLE.get()) // The sample item the drill will produce    .setOre(MyBlocks.URANIUM_ORE.get()) // The ore it's associated with    .setWeight(5) // How common it is relative to others (e.g., iron=20, diamond=3)    .setRequiredDrillTier(2) // Minimum drill tier required to find this    .build();// Register itArtisansAccordAPI.registerGeologyResource(uraniumResource);This automatically handles world-gen integration for prospecting. The drill will now have a chance to produce URANIUM_SAMPLE items.4.3. Registering a New Process (Artisan)This is the core of the compatibility. You define a chain of tasks for the Artisan.// 1. Define the individual tasksArtisanTask crushUranium = new ArtisanTask.Builder("crush_uranium")    .setInput(MyItems.URANIUM_SAMPLE.get(), 1)    .setOutput(MyItems.CRUSHED_URANIUM.get(), 2)    .setStationId("artisans_accord:crusher") // ID of the required modular station    .setToolTag("artisans_accord:tool_hammer") // Item tag for the tool needed    .setWorkDuration(200) // Ticks to complete    .build();ArtisanTask smeltUranium = new ArtisanTask.Builder("smelt_uranium")    .setInput(MyItems.CRUSHED_URANIUM.get(), 1)    .setOutput(MyItems.URANIUM_INGOT.get(), 1)    .setStationId("artisans_accord:smelter")    .setToolTag("artisans_accord:tool_tongs")    .setWorkDuration(400)    .build();// 2. Chain the tasks into a full processArtisanProcess uraniumProcess = new ArtisanProcess.Builder("process_uranium")    .setPrimaryInput(MyItems.URANIUM_SAMPLE.get()) // The item that starts the whole chain    .addTask(crushUranium)    .addTask(smeltUranium)    .build();// 3. Register the processArtisansAccordAPI.registerArtisanProcess(uraniumProcess);Now, when a player places a URANIUM_SAMPLE on the Assembly Anvil, their Artisan will know exactly what to do, which stations to visit, and what tools to use. This system is infinitely extensible for multi-stage processing chains.4.4. Accessing Villager DataThe API will also provide read-only access to Villager Needs data (Stamina, Happiness) for other mods to use in their own UI elements (like The One Probe or Jade overlays) if they wish, allowing for deep integration into the wider modded ecosystem.